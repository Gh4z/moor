***WORK IN PROGRESS***

Moor - PHP 5 Routing/Controller Library

        AUTHOR: Jeff Turcotte / jeffturcotte.com
    DISCLAIMER: This is alpha software and is not recommended for production use.
       LICENSE: MIT (see LICENSE for more details).
	   VERSION: 0.2

    1) Introduction
    2) Hello World
    3) Param Matching & Extraction
    4) MoorController

-- 1 -- Introduction

    Moor...
        - is a small URL routing library for PHP 5
        - lets you define resources with a simple URL => callback mapping
        - can take many shapes and be configured in many ways.
        - would encourage you to keep things RESTful, but it's up to you
    
    Moor is broken up into a few separate pieces:

    Moor.php
        The URL router. Matches URL patterns, extracts 
        defined parameters from it, and runs a callback.

    MoorResource.php
        A Rails-esque controller extension for Moor. Not required,
        but worthwhile most of the time.

	MoorHelpers.php
		Helper functions and callbacks for common actions and configurations.
    

-- 2 -- Hello World
	
	Moor::addRoute('/', 'hello');
	
	function hello() {
		echo 'hello world';
	}	

	Moor::route();

-- 3 -- Param Matching & Extraction

	Moor can extract parameters in a URL. Let's say we want to match a user by 
	their name. This isn't too complex of a URL pattern so we can use a shorthand
	URL definition.
	
		Moor::addRoute('/user/:name', 'read_user');
	
		function read_user() {
			// we can always get a param like this
			echo Moor::getParam();
		
			// or if the 'pollute' option is enabled (it is by default)
			echo $_GET['name'];
		}
		
		Moor::route();
		
	The shorthand ':VARNAME' will attempt to match the pattern ([0-9a-zA-Z_-]+). Most
	of the time, this is all we are ever going to need, but occasionally we need to match
	a complex pattern. Lets say we're writing a Blog and we want a url to display all 
	blogs from a certain YYYY-MM-DD pattern found in the URL.
		
		Moor::addRoute(array('#^/(\d{4,4}-\d{2,2}-\d{2,2})$#', 1 => 'date'), 'display_blogs');
		
		function display_blogs() {
			$date = $_GET['date'];
			
			// find all the blogs with $date and your ORM of choice
		}
		
		Moor::route();
    
-- 4 -- MoorController

	Most web apps aren't simple services and they require a little more organization than
	the previous examples can provide. With MoorController we can structure our app in a 
	(hopefully) familiar controller/action pattern. Two special parameters exist:
	
		:controller => maps directly to a MoorController extending {:Controller}Controller class
		:action => maps directly to a public instance method within the {:Controller}Controller class
	
	We can use these in our URL definitions:
	
		MoorController::addRoute('/:controller/:action');
		Moor::route();

		class UserController extends MoorController{
			protected function __before() {
				echo "I get called before every action";
				echo "I'm protected to deny anyone trying to get to /user/__before";
			}
			
			function find() {
				echo "Let's find a user!";
			}
			
			protected function __after() {
				echo "I get called after every action";
			}
		}
		
	In the above code, a request path of /user/find would run the 'find' method in UserController.
		